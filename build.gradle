plugins {
    id 'java'
	id 'maven'
	id 'maven-publish'
	id 'org.cadixdev.licenser' version '0.5.0'
}

group 'net.fabricmc'
version '1.2.2'

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "fabric-meta"

repositories {
    mavenCentral()
}

dependencies {
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	implementation group: 'io.javalin', name: 'javalin', version: '3.13.3'
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
	implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
}

jar {
	manifest {
		attributes "Main-Class": "net.fabricmc.meta.FabricMeta"
	}
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

license {
	header file('HEADER')
	include '**/*.java'
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.group
			artifactId project.archivesBaseName
			version project.version

			artifact jar
		}
	}
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-meta/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
