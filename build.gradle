plugins {
    id 'java'
	id 'maven-publish'
	id 'checkstyle'
	id 'eclipse'
    id "com.github.gmazzo.buildconfig" version "5.6.7"
    id "com.diffplug.spotless" version "6.23.3"
}

def legacyVersion = "1.9.1"
group 'net.legacyfabric'
version '1.5.3'

version = legacyVersion + "+fabricmc." + project.version

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

base {
	archivesName = "fabric-meta"
}

repositories {
    mavenCentral()
}

dependencies {
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'io.javalin:javalin:5.6.3'
	implementation 'org.slf4j:slf4j-simple:2.0.9'
	implementation 'commons-io:commons-io:2.15.1'
	implementation 'org.jetbrains:annotations:24.1.0'
	implementation 'net.fabricmc:mapping-io:0.7.1'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.2"
	testImplementation 'io.javalin:javalin-testtools:5.6.3'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
	sourceCompatibility = 21
	targetCompatibility = 21
}

test {
	useJUnitPlatform()
}

buildConfig {
	className("BuildConstants")
	packageName("net.legacyfabric.meta")

	useJavaOutput()

	buildConfigField(String.class, "VERSION", "$project.version")
}

jar {
	manifest {
		attributes "Main-Class": "net.fabricmc.meta.FabricMeta"
	}
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	it.options.release = 21
}

spotless {
	lineEndings = com.diffplug.spotless.LineEnding.UNIX

	java {
		licenseHeaderFile(rootProject.file("HEADER"))
		removeUnusedImports()
		importOrder('java', 'javax', '', 'net.fabricmc', 'net.legacyfabric')
		indentWithTabs()
		trimTrailingWhitespace()
        targetExclude("**/BuildConstants.java",
                '**/VersionDatabase.java', '**/MinecraftLauncherMeta.java','**/EndpointsV2.java',
                '**/ProfileHandler.java', '**/MavenUrlVersion.java', '**/ServerBootstrap.java',
                '**/legacyfabric/**')
	}
    format("mixed", com.diffplug.gradle.spotless.JavaExtension) {
        licenseHeaderFile(rootProject.file("LF-HEADER"))
        removeUnusedImports()
        importOrder('java', 'javax', '', 'net.fabricmc', 'net.legacyfabric')
        indentWithTabs()
        trimTrailingWhitespace()
        target('**/VersionDatabase.java', '**/MinecraftLauncherMeta.java','**/EndpointsV2.java',
                '**/ProfileHandler.java', '**/MavenUrlVersion.java', '**/ServerBootstrap.java')
        targetExclude("**/BuildConstants.java")
    }
    format("legacyFabric", com.diffplug.gradle.spotless.JavaExtension) {
        licenseHeaderFile(rootProject.file("LF-ONLY-HEADER"))
        removeUnusedImports()
        importOrder('java', 'javax', '', 'net.fabricmc', 'net.legacyfabric')
        indentWithTabs()
        trimTrailingWhitespace()
        target('**/legacyfabric/**')
        targetExclude("**/BuildConstants.java")
    }
}

checkstyle {
	configFile = file('checkstyle.xml')
	toolVersion = "10.12.1"
}

checkstyleMain {
    source = fileTree("src/main/java")
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.group
			artifactId project.base.archivesName.get()
			version project.version

			artifact jar
		}
	}
	repositories {
		if (ENV.MAVEN_PUBLISH_CREDENTIALS) {
			maven {
				url "https://repo.legacyfabric.net/legacyfabric/"
				credentials {
					username ENV.MAVEN_PUBLISH_CREDENTIALS.split(":")[0]
					password ENV.MAVEN_PUBLISH_CREDENTIALS.split(":")[1]
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.legacyfabric.net/net/fabricmc/fabric-meta/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion
